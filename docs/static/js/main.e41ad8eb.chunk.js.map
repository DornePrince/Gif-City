{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","src","background","speed","loop","autoplay","className","type","placeholder","value","onChange","e","target","onClick","preventDefault","trim","length","cats","GifGridItem","id","title","url","console","log","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAwB9C,OACI,iCACI,+BAAeC,IAAI,8DAA+DC,WAAW,cAAeC,MAAM,IAAKC,MAAI,EAAEC,UAAQ,IAErI,sBAAKC,UAAU,iBAAf,UACA,4DAEI,uBACIC,KAAK,OACLC,YAAY,gBACZC,MAAQV,EACRW,SA/BU,SAACC,GACvBX,EAAcW,EAAEC,OAAOH,UAiCf,wBAAQI,QA9BC,SAACF,GAClBA,EAAEG,iBAECf,EAAWgB,OAAOC,OAAO,IACxBnB,GAAe,SAAAoB,GAAI,OAAKlB,GAAL,mBAAoBkB,OACvCjB,EAAc,MAyBV,2B,QCvCHkB,EAAc,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAIrC,OAFAC,QAAQC,IAAI,CAACJ,KAAKC,QAAOC,QAGrB,sBAAKf,UAAU,4CAAf,UACI,qBAAKL,IAAMoB,EAAMG,IAAMJ,IACvB,4BAAKA,Q,uBCPJK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAGTN,EAHS,iDAGuCO,UAAUF,GAHjD,+DAIIG,MAAOR,GAJX,cAITS,EAJS,gBAKMA,EAAKC,OALX,uBAKRC,EALQ,EAKRA,KAEDC,EAAOD,EAAKE,KAAM,SAAAC,GAAQ,IAAD,EAE3B,MAAM,CACFhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QAZ3B,kBAgBRY,GAhBQ,4CAAH,sDCEPK,EAAU,SAAC,GAAgB,IAAfZ,EAAc,EAAdA,SAAc,ECDX,SAAEA,GAAc,IAAD,EACb5B,mBAAS,CAC/BkC,KAAM,GACNO,SAAS,IAH0B,mBAChCC,EADgC,KACzBC,EADyB,KA6BvC,OAtBAC,qBAAU,WACNjB,EAASC,GACJiB,MAAK,SAAAC,GAEFH,EAAS,CACDT,KAAMY,EACNL,SAAS,MAGd,QAGZ,CAACb,IAUGc,ED1BwBK,CAAcnB,GAAjCU,EAFuB,EAE5BJ,KAF4B,EAEfO,QAEpB,OAEI,qCAGI,6BAAKb,IAIL,qBAAKpB,UAAU,YAAf,SAGY8B,EAAOF,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEQA,GADCA,EAAIhB,aEiB1B2B,EAnCM,WAAO,IAAD,EAGWhD,mBAAU,CAAC,KAHtB,mBAGlBiD,EAHkB,KAGNlD,EAHM,KAOvB,OACE,qCAGI,yCACA,cAAC,EAAD,CAAaA,cAAeA,EAAeS,UAAU,SAMvD,uBAEA,6BAEIyC,EAAWb,KAAK,SAAAR,GAAQ,OACtB,cAAC,EAAD,CAEEA,SAAUA,GADLA,Y,MClBrBsB,IAASC,OAEL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.e41ad8eb.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( {setCategories} ) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) =>{\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n\r\n        if(inputValue.trim().length>2){\r\n            setCategories( cats => [inputValue, ...cats ]);\r\n            setInputValue('');\r\n        }\r\n\r\n\r\n        // PONER EL DISABLE\r\n/*         if(inputValue.length === 0){\r\n            \r\n        } */\r\n\r\n    }\r\n\r\n    return (\r\n        <form>\r\n            <lottie-player src=\"https://assets4.lottiefiles.com/packages/lf20_xh83pj1c.json\"  background=\"transparent\"  speed=\"1\"  loop  autoplay></lottie-player>\r\n\r\n            <div className=\"form-container\">\r\n            <p>What can we search for you?</p>\r\n\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Try something\"\r\n                    value= {inputValue}\r\n                    onChange={ handleInputChange }\r\n                />\r\n\r\n                <button onClick = {handleSubmit}>Search</button>\r\n            </div>\r\n\r\n            \r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( {id, title, url} ) => {\r\n\r\n    console.log({id,  title, url});\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__slideInUp\">\r\n            <img src={ url } alt={ title } />\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","\r\n\r\nexport const getGifs = async( category ) =>{\r\n\r\n\r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=CMnr7aOXg2fAtix3ZnlrjGfiSf3noieO`;\r\n        const resp = await fetch( url );\r\n        const {data} = await resp.json();\r\n\r\n        const gifs = data.map ( img => {\r\n\r\n            return{\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url\r\n            }\r\n        })\r\n\r\n        return gifs;\r\n    }","import React from 'react'\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    const {data:images, loading} = useFetchGifs( category );\r\n\r\n    return (\r\n\r\n        <>\r\n\r\n            \r\n            <h3>{category}</h3>\r\n            \r\n            {/* {loading && <p>Loading</p>} */}\r\n\r\n            <div className=\"card-grid\">\r\n\r\n                    {\r\n                        images.map( img =>(\r\n                            <GifGridItem\r\n                                key={img.id}\r\n                                {...img} \r\n                            />\r\n                        ))\r\n                    }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n","import {useState, useEffect} from 'react'\r\nimport {getGifs} from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = ( category ) =>{\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs( category )\r\n            .then(imgs => {\r\n                \r\n                setState({\r\n                        data: imgs,\r\n                        loading: false\r\n                    })\r\n                    \r\n                }, 1200);\r\n\r\n\r\n    }, [category])\r\n\r\n        //solo se ejecuta cuando el componente es renderizado por primera vez\r\n   /*  useEffect( () =>{\r\n        getGifs(category)\r\n        .then (imgs => setImages(imgs));\r\n    }, [ category ]); */\r\n\r\n\r\n\r\n    return state; \r\n}","import React, {useState} from 'react';\r\nimport { AddCategory } from \"./components/AddCategory\"\r\nimport { GifGrid } from \"./components/GifGrid\"\r\n\r\nconst GifExpertApp = () => {\r\n\r\n  \r\n  const [categories, setCategories] = useState( [''] );\r\n\r\n\r\n\r\n    return (\r\n      <>\r\n\r\n        \r\n          <h2>GifCity</h2>\r\n          <AddCategory setCategories={setCategories} className=\"main\" />\r\n          \r\n        \r\n        \r\n        \r\n\r\n        <br />\r\n        \r\n        <ol>\r\n          {\r\n            categories.map( category => (\r\n              <GifGrid\r\n                key={category}\r\n                category={category}\r\n              />\r\n            ))\r\n          }\r\n        </ol>\r\n      </>\r\n    )\r\n  }\r\n  \r\n  \r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\n\n\n//GifExpertApp\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n\n\n\n\n"],"sourceRoot":""}